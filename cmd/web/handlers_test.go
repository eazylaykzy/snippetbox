package main

import (
	"bytes"
	"io"
	"net/http"
	"net/http/httptest"
	"net/url"
	"testing"
)

func TestPing(t *testing.T) {
	// Initialize a new httptest.ResponseRecorder.
	rr := httptest.NewRecorder()

	// Initialize a new dummy http.Request.
	r, err := http.NewRequest(http.MethodGet, "/", nil)
	if err != nil {
		t.Fatal(err)
	}

	// Call the ping handler function, passing in the httptest.ResponseRecorder and http.Request.
	ping(rr, r)

	// Call the Result() method on the http.ResponseRecorder to get the http.Response generated by the ping handler.
	rs := rr.Result()

	// We can then examine the http.Response to check that the status code written by the ping handler was 200.
	if rs.StatusCode != http.StatusOK {
		t.Errorf("want %d; got %d", http.StatusOK, rs.StatusCode)
	}

	// And we can check that the response body written by the ping handler equals "OK".
	defer rs.Body.Close()

	body, err := io.ReadAll(rs.Body)
	if err != nil {
		t.Fatal(err)
	}

	if string(body) != "OK" {
		t.Errorf("want body to equal %q", "OK")
	}
}

func TestPingE2E(t *testing.T) {
	app := newTestApplication(t)
	ts := newTestServer(t, app.routes())

	defer ts.Close()

	code, _, body := ts.get(t, "/ping")

	if code != http.StatusOK {
		t.Errorf("want %d; got %d", http.StatusOK, code)
	}

	if string(body) != "OK" {
		t.Errorf("want body to equal %q", "OK")
	}
}

func TestShowSnippet(t *testing.T) {
	// Create a new instance of our application struct which uses the mocked dependencies.
	app := newTestApplication(t)

	// Establish a new test server for running end-to-end tests.
	ts := newTestServer(t, app.routes())

	defer ts.Close()

	// Set up some table-driven tests to check the responses sent by our application for different URLs.
	tests := []struct {
		name     string
		urlPath  string
		wantCode int
		wantBody []byte
	}{
		{"Empty ID", "/snippet/", http.StatusNotFound, nil},
		{"String ID", "/snippet/foo", http.StatusNotFound, nil},
		{"Negative ID", "/snippet/-1", http.StatusNotFound, nil},
		{"Decimal ID", "/snippet/1.23", http.StatusNotFound, nil},
		{"Non-existent ID", "/snippet/2", http.StatusNotFound, nil},
		{"Trailing slash", "/snippet/1/", http.StatusNotFound, nil},
		{"Valid ID", "/snippet/1", http.StatusOK, []byte("An old silent pond...")},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			code, _, body := ts.get(t, tt.urlPath)
			if code != tt.wantCode {
				t.Errorf("want %d; got %d", tt.wantCode, code)
			}
			if !bytes.Contains(body, tt.wantBody) {
				t.Errorf("want body to contain %q", tt.wantBody)
			}
		})
	}
}

func TestHome(t *testing.T) {
	// Create a new instance of our application struct which uses the mocked dependencies.
	app := newTestApplication(t)

	// Establish a new test server for running end-to-end tests.
	ts := newTestServer(t, app.routes())

	defer ts.Close()

	// Set up some table-driven tests to check the responses sent by our application for different URLs.
	tests := []struct {
		name     string
		urlPath  string
		wantCode int
		wantBody []byte
	}{
		{"Double slash home", "//", http.StatusNotFound, nil},
		{"This goes home", "/", http.StatusOK, []byte("An old silent pond")},
		{"This goes home to Nigeria", "/", http.StatusOK, []byte("Great Nigeria")},
		{"Home with an invalid route", "/invalid-route", http.StatusNotFound, nil},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			code, _, body := ts.latest(t, tt.urlPath)

			if code != tt.wantCode {
				t.Errorf("want %d; got %d", tt.wantCode, code)
			}

			if !bytes.Contains(body, tt.wantBody) {
				t.Errorf("want body to contain %q", tt.wantBody)
			}
		})
	}
}

func TestSignupUser(t *testing.T) {
	app := newTestApplication(t)
	ts := newTestServer(t, app.routes())

	defer ts.Close()

	_, _, body := ts.get(t, "/user/signup")
	csrfToken := extractCSRFToken(t, body)

	tests := []struct {
		name         string
		userName     string
		userEmail    string
		userPassword string
		csrfToken    string
		wantCode     int
		wantBody     []byte
	}{
		{"Invalid CSRF Token", "", "", "", "wrongToken", http.StatusBadRequest, nil},
		{"Valid submission", "Bob", "bob@example.com", "validPa$$word", csrfToken, http.StatusSeeOther, nil},
		{"Empty email", "Bob", "", "validPa$$word", csrfToken, http.StatusOK, []byte("This field cannot be blank")},
		{"Empty password", "Bob", "bob@example.com", "", csrfToken, http.StatusOK, []byte("This field cannot be blank")},
		{"Empty name", "", "bob@example.com", "validPa$$word", csrfToken, http.StatusOK, []byte("This field cannot be blank")},
		{"Duplicate email", "Bob", "dupe@example.com", "validPa$$word", csrfToken, http.StatusOK, []byte("Address is already in use")},
		{"Invalid email (missing @)", "Bob", "bobexample.com", "validPa$$word", csrfToken, http.StatusOK, []byte("This field is invalid")},
		{"Invalid email (incomplete domain)", "Bob", "bob@example.", "validPa$$word", csrfToken, http.StatusOK, []byte("This field is invalid")},
		{"Invalid email (missing local part)", "Bob", "@example.com", "validPa$$word", csrfToken, http.StatusOK, []byte("This field is invalid")},
		{"Short password", "Bob", "bob@example.com", "pa$$word", csrfToken, http.StatusOK, []byte("This field is too short (minimum is 10 characters)")},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			form := url.Values{}
			form.Add("name", tt.userName)
			form.Add("email", tt.userEmail)
			form.Add("csrf_token", tt.csrfToken)
			form.Add("password", tt.userPassword)
			code, _, body := ts.postForm(t, "/user/signup", form)

			if code != tt.wantCode {
				t.Errorf("want %d; got %d", tt.wantCode, code)
			}

			if !bytes.Contains(body, tt.wantBody) {
				t.Errorf("want body %s to contain %q", body, tt.wantBody)
			}
		})
	}
}

func TestLoginUser(t *testing.T) {
	app := newTestApplication(t)
	ts := newTestServer(t, app.routes())

	defer ts.Close()

	_, _, body := ts.get(t, "/user/login")
	csrfToken := extractCSRFToken(t, body)

	tests := []struct {
		name         string
		userEmail    string
		userPassword string
		csrfToken    string
		wantCode     int
		wantBody     []byte
	}{
		{"Invalid CSRF Token", "", "", "wrongToken", http.StatusBadRequest, nil},
		{"Valid submission", "eazy@example.com", "Argument123", csrfToken, http.StatusSeeOther, nil},
		{"Empty email", "", "validPa$$word", csrfToken, http.StatusOK, []byte("Email or Password is incorrect")},
		{"Empty password", "bob@example.com", "", csrfToken, http.StatusOK, []byte("Email or Password is incorrect")},
		{"Invalid email (missing @)", "bobexample.com", "validPa$$word", csrfToken, http.StatusOK, []byte("Email or Password is incorrect")},
		{"Invalid email (incomplete domain)", "bob@example.", "validPa$$word", csrfToken, http.StatusOK, []byte("Email or Password is incorrect")},
		{"Invalid email (missing local part)", "@example.com", "validPa$$word", csrfToken, http.StatusOK, []byte("Email or Password is incorrect")},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			form := url.Values{}
			form.Add("email", tt.userEmail)
			form.Add("csrf_token", tt.csrfToken)
			form.Add("password", tt.userPassword)
			code, _, body := ts.postForm(t, "/user/login", form)

			if code != tt.wantCode {
				t.Errorf("want %d; got %d", tt.wantCode, code)
			}

			if !bytes.Contains(body, tt.wantBody) {
				t.Errorf("want body %s to contain %q", body, tt.wantBody)
			}
		})
	}
}

func TestCreateSnippet(t *testing.T) {
	app := newTestApplication(t)
	ts := newTestServer(t, app.routes())

	defer ts.Close()

	// First we authenticate an app user, only an authenticated user can create a snippet
	_, _, body := ts.get(t, "/user/login")
	csrfToken := extractCSRFToken(t, body)

	form := url.Values{}
	form.Add("password", "")
	form.Add("email", "eazy@example.com")
	form.Add("csrf_token", csrfToken)
	ts.postForm(t, "/user/login", form)

	// only then will the app redirect to the create snippet page for the authenticated user
	status, _, body := ts.get(t, "/snippet/create")
	if status != 200 {
		t.Errorf("want %d; got %d", 200, status)
	}

	formTag := "<form action='/snippet/create' method='POST'>"
	if !bytes.Contains(body, []byte(formTag)) {
		t.Errorf("want body %s to contain %q", body, formTag)
	}

	// extract the csrf token for the snippet form for the authenticated user
	//csrfToken = extractCSRFToken(t, body)

	tests := []struct {
		name      string
		title     string
		content   string
		expires   string
		csrfToken string
		wantCode  int
		wantBody  []byte
	}{
		{"Invalid CSRF Token", "", "", "", "wrongToken", http.StatusBadRequest, nil},
		{"Empty content", "Hello", "", "7", csrfToken, http.StatusOK, []byte("This field cannot be blank")},
		{"Empty title", "", "Greater days ahead!", "1", csrfToken, http.StatusOK, []byte("This field cannot be blank")},
		{"Empty expire date", "Moving", "Moving forward", "", csrfToken, http.StatusOK, []byte("This field cannot be blank")},
		{"Valid submission", "Great Nigeria", "Nigeria will definitely be great again!", "365", csrfToken, http.StatusSeeOther, nil},
		{"Long title characters", "This is a pretty long ass title character count, that is so long, it is actually longer than a hundreds of character", "bob@example.com", "pa$$word", csrfToken, http.StatusOK, []byte("This field is too long (maximum is 100 characters)")},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			form := url.Values{}
			form.Add("title", tt.title)
			form.Add("content", tt.content)
			form.Add("expires", tt.expires)
			form.Add("csrf_token", tt.csrfToken)
			code, _, body := ts.postForm(t, "/snippet/create", form)

			if code != tt.wantCode {
				t.Errorf("want %d; got %d", tt.wantCode, code)
			}

			if !bytes.Contains(body, tt.wantBody) {
				t.Errorf("want body %s to contain %q", body, tt.wantBody)
			}
		})
	}
}

func TestLogoutUser(t *testing.T) {
	app := newTestApplication(t)
	ts := newTestServer(t, app.routes())

	defer ts.Close()

	// First we authenticate an app user, only an authenticated user can create a snippet
	_, _, body := ts.get(t, "/user/login")
	csrfToken := extractCSRFToken(t, body)

	form := url.Values{}
	form.Add("password", "")
	form.Add("email", "eazy@example.com")
	form.Add("csrf_token", csrfToken)
	ts.postForm(t, "/user/login", form)

	// only then will the app redirect to the create snippet page for the authenticated user
	status, _, body := ts.get(t, "/snippet/create")
	if status != 200 {
		t.Errorf("want %d; got %d", 200, status)
	}

	formTag := "<form action='/snippet/create' method='POST'>"
	if !bytes.Contains(body, []byte(formTag)) {
		t.Errorf("want body %s to contain %q", body, formTag)
	}

	tests := []struct {
		name      string
		csrfToken string
		wantCode  int
		wantBody  []byte
	}{
		{"Valid logout message", csrfToken, http.StatusSeeOther, nil},
		{"Invalid CSRF Token", "wrongToken", http.StatusBadRequest, nil},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// after which we call the logout route and post the form
			form := url.Values{}
			form.Add("csrf_token", tt.csrfToken)
			code, _, body := ts.postForm(t, "/user/logout", form)

			if code != tt.wantCode {
				t.Errorf("want %d; got %d", tt.wantCode, code)
			}

			if !bytes.Contains(body, tt.wantBody) {
				t.Errorf("want body %s to contain %q", body, tt.wantBody)
			}
		})
	}
}
